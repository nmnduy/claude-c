name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      prerelease:
        description: 'Is this a prerelease?'
        required: true
        default: 'false'
        type: boolean

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
            ext: ''
            asset_name: claude-c-linux-x86_64
          - os: macos-latest
            name: macos
            ext: ''
            asset_name: claude-c-macos-x86_64
          - os: windows-latest
            name: windows
            ext: .exe
            asset_name: claude-c-windows-x86_64.exe

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup build environment
      uses: ./.github/actions/setup-build
      with:
        os: ${{ matrix.os }}

    - name: Build (Linux/macOS)
      if: matrix.name != 'windows'
      run: |
        make clean
        make CFLAGS="-O3 -DNDEBUG -static-libgcc -static-libstdc++"
        
    - name: Build (Windows)
      if: matrix.name == 'windows'
      shell: powershell
      run: |
        # For Windows, we'll use MSVC with vcpkg
        $env:VCPKG_ROOT = "${{ github.workspace }}/vcpkg"
        $env:CMAKE_TOOLCHAIN_FILE = "$env:VCPKG_ROOT/scripts/buildsystems/vcpkg.cmake"
        
        # Create a simple CMakeLists.txt for Windows build
        @"
cmake_minimum_required(VERSION 3.15)
project(claude-c C)

set(CMAKE_C_STANDARD 11)
set(CMAKE_C_STANDARD_REQUIRED ON)

find_package(CURL REQUIRED)
find_package(cJSON REQUIRED)
find_package(SQLite3 REQUIRED)

add_executable(claude-c
  src/claude.c
  src/logger.c
  src/persistence.c
  src/migrations.c
  src/lineedit.c
  src/commands.c
  src/completion.c
  src/tui.c
  src/todo.c
)

target_link_libraries(claude-c
  CURL::libcurl
  cjson::cjson
  SQLite::SQLite3
  pthread
)

target_compile_definitions(claude-c PRIVATE _POSIX_C_SOURCE=200809L)
"@ | Out-File -FilePath CMakeLists.txt -Encoding UTF8

        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=Release -A x64
        cmake --build . --config Release
        cd ..

    - name: Prepare binary
      shell: bash
      run: |
        if [ "${{ matrix.name }}" = "windows" ]; then
          cp build/Release/claude-c${{ matrix.ext }} claude-c${{ matrix.ext }}
        else
          cp build/claude-c${{ matrix.ext }} claude-c${{ matrix.ext }}
        fi
        
        # Create archive
        mkdir claude-c-${{ matrix.name }}-x86_64
        cp claude-c${{ matrix.ext }} claude-c-${{ matrix.name }}-x86_64/
        cp README.md claude-c-${{ matrix.name }}-x86_64/
        cp LICENSE claude-c-${{ matrix.name }}-x86_64/ 2>/dev/null || echo "No LICENSE file found"
        
        # Add installation instructions
        cat > claude-c-${{ matrix.name }}-x86_64/INSTALL.txt << 'EOF'
Claude C - Pure C Edition

Installation:
1. Extract the archive
2. Copy claude-c${{ matrix.ext }} to your desired location
3. Make sure the binary is executable (Linux/macOS): chmod +x claude-c
4. Set your API key: export OPENAI_API_KEY="your-api-key"
5. Run: ./claude-c${{ matrix.ext }} "your prompt"

Dependencies:
- Linux: Most systems have required libraries pre-installed
- macOS: brew install curl cjson sqlite3 (if needed)
- Windows: Dependencies are statically linked

For more information, see README.md
EOF

    - name: Create archive
      shell: bash
      run: |
        if [ "${{ matrix.name }}" = "windows" ]; then
          7z a claude-c-${{ matrix.name }}-x86_64.zip claude-c-${{ matrix.name }}-x86_64/
          echo "ASSET=claude-c-${{ matrix.name }}-x86_64.zip" >> $GITHUB_ENV
        else
          tar -czf claude-c-${{ matrix.name }}-x86_64.tar.gz claude-c-${{ matrix.name }}-x86_64/
          echo "ASSET=claude-c-${{ matrix.name }}-x86_64.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: claude-c-${{ matrix.name }}-x86_64
        path: ${{ env.ASSET }}
        retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Determine version and prerelease
      id: release_info
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
          PRERELEASE="${{ github.event.inputs.prerelease }}"
        else
          VERSION=${GITHUB_REF#refs/tags/}
          # Check if version contains pre-release identifiers
          if [[ "$VERSION" =~ (alpha|beta|rc|dev) ]]; then
            PRERELEASE="true"
          else
            PRERELEASE="false"
          fi
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT
        
        # Create release notes from recent commits
        if [ -f "CHANGELOG.md" ]; then
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          head -50 CHANGELOG.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "release_notes<<EOF" >> $GITHUB_OUTPUT
          echo "## Changes in $VERSION" >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> $GITHUB_OUTPUT
          echo "" >> $GITHUB_OUTPUT
          echo "## Downloads" >> $GITHUB_OUTPUT
          echo "- Linux: claude-c-linux-x86_64.tar.gz" >> $GITHUB_OUTPUT
          echo "- macOS: claude-c-macos-x86_64.tar.gz" >> $GITHUB_OUTPUT
          echo "- Windows: claude-c-windows-x86_64.zip" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        fi

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.release_info.outputs.version }}
        name: Claude C ${{ steps.release_info.outputs.version }}
        body: ${{ steps.release_info.outputs.release_notes }}
        draft: false
        prerelease: ${{ steps.release_info.outputs.prerelease }}
        files: |
          artifacts/claude-c-linux-x86_64/claude-c-linux-x86_64.tar.gz
          artifacts/claude-c-macos-x86_64/claude-c-macos-x86_64.tar.gz
          artifacts/claude-c-windows-x86_64/claude-c-windows-x86_64.zip
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Update latest tag (for stable releases only)
      if: steps.release_info.outputs.prerelease == 'false'
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag -f latest
        git push -f origin latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Optional: Build and publish Docker image
  docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=tag
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max