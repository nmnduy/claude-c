name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'
      prerelease:
        description: 'Is this a prerelease?'
        required: true
        default: 'false'
        type: boolean

permissions:
  contents: write

jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            name: linux
            asset_name: claude-c-linux-x86_64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libcurl4-openssl-dev libcjson-dev sqlite3 libsqlite3-dev libssl-dev build-essential

      - name: Build
        run: |
          make clean
          make CFLAGS="-O3 -DNDEBUG"

      - name: Prepare binary and archive
        run: |
          cp build/claude-c claude-c
          mkdir claude-c-${{ matrix.name }}-x86_64
          cp claude-c claude-c-${{ matrix.name }}-x86_64/
          cp README.md claude-c-${{ matrix.name }}-x86_64/
          cp LICENSE claude-c-${{ matrix.name }}-x86_64/ 2>/dev/null || echo "No LICENSE file found"

          # Create installation instructions
          cat > claude-c-${{ matrix.name }}-x86_64/INSTALL.txt <<'EOF'
          Claude C - Pure C Edition

          Installation:
            1. Extract the archive
            2. Copy claude-c to /usr/local/bin or another directory in PATH
            3. Make the binary executable: chmod +x claude-c
            4. Set your API key: export OPENAI_API_KEY="your-api-key"
            5. Run: ./claude-c "your prompt"

          Dependencies:
            - Linux: libcurl, cjson, sqlite3 (usually pre-installed)

          For more information, see README.md
          EOF

          # Create archive
          tar -czf claude-c-${{ matrix.name }}-x86_64.tar.gz claude-c-${{ matrix.name }}-x86_64/
          echo "ASSET=claude-c-${{ matrix.name }}-x86_64.tar.gz" >> $GITHUB_ENV

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: claude-c-${{ matrix.name }}-x86_64
          path: ${{ env.ASSET }}
          retention-days: 30

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Determine version and prerelease
        id: release_info
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
            if [[ "$VERSION" =~ (alpha|beta|rc|dev) ]]; then
              PRERELEASE="true"
            else
              PRERELEASE="false"
            fi
          fi

          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "prerelease=$PRERELEASE" >> $GITHUB_OUTPUT

          # Generate release notes
          {
            echo "release_notes<<EOF"
            if [ -f "CHANGELOG.md" ]; then
              head -50 CHANGELOG.md
            else
              echo "## Changes in $VERSION"
              echo ""
              git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD || echo "- Initial release"
              echo ""
              echo "## Downloads"
              echo "- Linux: claude-c-linux-x86_64.tar.gz"
            fi
            echo "EOF"
          } >> "$GITHUB_OUTPUT"

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_info.outputs.version }}
          name: Claude C ${{ steps.release_info.outputs.version }}
          body: ${{ steps.release_info.outputs.release_notes }}
          draft: false
          prerelease: ${{ steps.release_info.outputs.prerelease }}
          files: |
            artifacts/**/claude-c-*-x86_64.tar.gz
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update 'latest' tag (for stable releases)
        if: steps.release_info.outputs.prerelease == 'false'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git tag -f latest
          git push -f origin latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
